# ==========================================================
# Docker Compose — Sara AI Core (Phase 10H, Production Ready)
# ----------------------------------------------------------
# Orchestrates all 4 key services:
#   - web: Flask API (TTS + inference)
#   - streaming: SSE/Twilio streaming server
#   - worker: Celery async processing
#   - redis: state + broker backend
# ==========================================================

version: "3.9"

services:
  # -----------------------------
  # 1️⃣ Web API (Flask + Gunicorn)
  # -----------------------------
  web:
    build: .
    container_name: sara-ai-core-web
    command: >
      sh -c "gunicorn app:app --workers 2 --threads 4 --bind 0.0.0.0:5000
      --timeout 120 --log-level info"
    ports:
      - "${WEB_PORT:-5000}:5000"
    env_file: .env
    depends_on:
      - redis
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/healthz"]
      interval: 20s
      timeout: 5s
      retries: 3

  # -----------------------------
  # 2️⃣ Streaming Server
  # -----------------------------
  streaming:
    build: .
    container_name: sara-ai-core-streaming
    command: >
      sh -c "gunicorn streaming_server:app --workers 2 --threads 4
      --bind 0.0.0.0:8765 --timeout 120 --log-level info"
    ports:
      - "${STREAMING_PORT:-8765}:8765"
    env_file: .env
    depends_on:
      - redis
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8765/health"]
      interval: 20s
      timeout: 5s
      retries: 3

  # -----------------------------
  # 3️⃣ Celery Worker
  # -----------------------------
  worker:
    build: .
    container_name: sara-ai-core-worker
    command: >
      sh -c "celery -A celery_app.celery worker --loglevel=info --concurrency=2"
    env_file: .env
    depends_on:
      - redis
    restart: always

  # -----------------------------
  # 4️⃣ Redis (Broker + Backend)
  # -----------------------------
  redis:
    image: redis:7.2-alpine
    container_name: sara-ai-core-redis
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

# -----------------------------
# Named Volumes
# -----------------------------
volumes:
  redis-data:
